version: '3.8'
services:
  mongodb: # Docker Compose르ㄹ 사용하면 -d와 --rm가 default이다.
    image: 'mongo'
    volumes:
      - data:/data/db
      #  참고 key:value 쌍이 있다면 - 필요 X, 값만 있다면 -로 설정하라
    # environment:
      # MONGO_INITDB_ROOT_USERNAME: max
      # MONGO_INITDB_ROOT_PASSWORD: secret
    env_file:
      - ./env/mongo.env
    # 도커 컴포즈를 사용하면 특정된 모든 서비스에 대해 새로운 환경을 자동으로 생성하고 모든 서비스를 즉시 그 네트워크에 추가하기 때문에 network를 설정 할 필요 없다.
    # networks:
      # - goals-net
  backend:
    build: ./backend # <- 보통 이런식으로 하면 된다.
    # 아래와 같은 형식으로 도커 컴포즈에 사용할 Dockerfile을 알릴 수 있다.
    # 아래와 같이 Dockerfile의 경로를 설정해 줄 수 있으나 Dockerfile이 빌드되는 장소이기도 하다.
    # 이미지가 생성되는 위치이므로 이는 Context가 Dockerfile이 참조할 수 있는 모든 것을 포함하는 폴더로 설정 되어야 함을 의미
    # 복잡한 구조일 때 자세히 이해해보자
    # build: 
    #   context: ./backend
    #   dockerfile: Dockerfile 
    #   args:
    #     some-arg: 1  
    ports:
      - '80:80'
    volumes:
      - logs:/app/logs
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./env/backend.env
    depends_on: # backend가 실행되기 전 mongodb가 실행 되어야 함, 의존성을 나타냄?
      - mongodb
  frontend:
    build: ./frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend/src:/app/src
    # interactice mode 
    stdin_open: true
    tty: true
    depends_on:
      - backend

# 여기는 named volume만 추가해 주자?
# 바인드 마운트와 익명 볼륨은 추가할 수 없다.
# 도커 컴포즈를 내의 컨테이너들은 해당 볼륨을 공유할수 있다?
volumes:
  data:
  logs: